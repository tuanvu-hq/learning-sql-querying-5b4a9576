//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.16

// use sea_orm::entity::prelude::*;
// use sqlx::prelude::FromRow;

// #[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, FromRow)]
// #[sea_orm(schema_name = "sales", table_name = "ordersarchive")]
// pub struct Model {
//     #[sea_orm(primary_key, auto_increment = false)]
//     pub archiveid: i32,
//     pub orderid: Option<i32>,
//     pub productid: Option<i32>,
//     pub customerid: Option<i32>,
//     pub salespersonid: Option<i32>,
//     pub orderdate: Option<Date>,
//     pub shipdate: Option<Date>,
//     pub orderstatus: Option<String>,
//     pub shipaddress: Option<String>,
//     pub billaddress: Option<String>,
//     pub quantity: Option<i32>,
//     pub sales: Option<i32>,
//     pub creationtime: Option<DateTime>,
// }

// #[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
// pub enum Relation {}

// impl ActiveModelBehavior for ActiveModel {}

use sea_orm::entity::prelude::*;
use sqlx::prelude::FromRow;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, FromRow)]
#[sea_orm(schema_name = "sales", table_name = "ordersarchive")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub archiveid: i32,
    pub orderid: Option<i32>,
    pub productid: Option<i32>,
    pub customerid: Option<i32>,
    pub salespersonid: Option<i32>,
    pub orderdate: Option<Date>,
    pub shipdate: Option<Date>,
    pub orderstatus: Option<String>,
    pub shipaddress: Option<String>,
    pub billaddress: Option<String>,
    pub quantity: Option<i32>,
    pub sales: Option<i32>,
    pub creationtime: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::customers::Entity",
        from = "Column::Customerid",
        to = "super::customers::Column::Customerid"
    )]
    Customers,
    #[sea_orm(
        belongs_to = "super::products::Entity",
        from = "Column::Productid",
        to = "super::products::Column::Productid"
    )]
    Products,
    #[sea_orm(
        belongs_to = "super::employees::Entity",
        from = "Column::Salespersonid",
        to = "super::employees::Column::Employeeid"
    )]
    Employees,
}

impl Related<super::customers::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Customers.def()
    }
}

impl Related<super::products::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Products.def()
    }
}

impl Related<super::employees::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Employees.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
