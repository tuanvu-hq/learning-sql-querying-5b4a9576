//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.16

// use sea_orm::entity::prelude::*;
// use sqlx::prelude::FromRow;

// #[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, FromRow)]
// #[sea_orm(schema_name = "sales", table_name = "employees")]
// pub struct Model {
//     #[sea_orm(primary_key, auto_increment = false)]
//     pub employeeid: i32,
//     pub firstname: Option<String>,
//     pub lastname: Option<String>,
//     pub department: Option<String>,
//     pub birthdate: Option<Date>,
//     pub gender: Option<String>,
//     pub salary: Option<i32>,
//     pub managerid: Option<i32>,
// }

// #[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
// pub enum Relation {}

// impl ActiveModelBehavior for ActiveModel {}

use sea_orm::entity::prelude::*;
use sqlx::prelude::FromRow;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, FromRow)]
#[sea_orm(schema_name = "sales", table_name = "employees")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub employeeid: i32,
    pub firstname: Option<String>,
    pub lastname: Option<String>,
    pub department: Option<String>,
    pub birthdate: Option<Date>,
    pub gender: Option<String>,
    pub salary: Option<i32>,
    pub managerid: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::orders::Entity")]
    Orders,
    #[sea_orm(has_many = "super::ordersarchive::Entity")]
    OrdersArchive,
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::Managerid",
        to = "Column::Employeeid"
    )]
    Manager,
}

impl Related<super::orders::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Orders.def()
    }
}

impl Related<super::ordersarchive::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::OrdersArchive.def()
    }
}

impl Related<Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Manager.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
